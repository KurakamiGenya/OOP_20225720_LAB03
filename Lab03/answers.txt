Is JAVA a Pass by Value or a Pass by Reference programming language?

Java is "pass-by-value", but this can sometimes be confusing due to how it handles objects. Here's a detailed breakdown:

- Primitive Types:
For primitive data types like `int`, `float`, `boolean`, etc., Java is straightforward. The actual value is passed to the method, meaning the method works on a copy of the data. Changes to the parameter inside the method do not affect the original value.

Example:
```java
void modifyPrimitive(int value) {
    value = 10;
}

public static void main(String[] args) {
    int x = 5;
    modifyPrimitive(x);
    System.out.println(x); // Output: 5
}
```

The value of `x` remains unchanged because a copy of `x` was passed to the method.

---

- Objects:
For objects, Java still uses "pass-by-value", but the value being passed is a "reference to the object", not the object itself. This means:
+ You can change the object's state (its fields) within the method, and those changes will reflect in the original object.
+ However, if you try to reassign the reference itself within the method, it wonâ€™t affect the original reference outside the method.

Example:
```java
class MyObject {
    int value;
}

void modifyObject(MyObject obj) {
    obj.value = 10; // Modifies the object's state
    obj = new MyObject(); // Changes the reference locally
    obj.value = 20;
}

public static void main(String[] args) {
    MyObject obj = new MyObject();
    obj.value = 5;
    modifyObject(obj);
    System.out.println(obj.value); // Output: 10
}
```

Here:
+ The `obj.value` field was changed to `10`, and this change is visible outside the method because the method was operating on the original object via its reference.
+ However, reassigning `obj` to a new object (`new MyObject()`) inside the method did not affect the original reference outside the method.

---

- Why Java is Not Pass-by-Reference?
In "pass-by-reference", the method would have direct access to the caller's variable, and reassigning the reference in the method would also change the original reference outside the method. Java doesn't do this.

Example (Pass-by-Reference, Hypothetical):
```java
void modifyReference(int[] arr) {
    arr = new int[]{5, 6, 7};
}

public static void main(String[] args) {
    int[] array = {1, 2, 3};
    modifyReference(array);
    System.out.println(array[0]); // In a pass-by-reference model, this would output 5
}
```

In Java, the above won't modify the original `array` reference; the method only changes its local copy of the reference.

---

- Conclusion
Java is strictly **pass-by-value**:
+ For primitives, the value is copied.
+ For objects, the reference (pointer) to the object is copied, but the object itself is not.

-----***-----

After the call of `swap(jungleDVD, cinderellaDVD`)`, why does the title of these two objects still remain?

The `swap` method does not actually swap the two objects in the caller because Java uses "pass-by-value". When `swap(jungleDVD, cinderellaDVD)` is called:
- The references to `jungleDVD` and `cinderellaDVD` are passed BY VALUE to the method.
- Inside the `swap` method, the local variables `o1` and `o2` are swapped, but this has no effect on the original references (`jungleDVD` and `cinderellaDVD`) in the `main` method.

Thus, the `swap` method only changes the local references within its scope. The original references in `main` remain unchanged, and as a result, the titles of the two objects are unaffected.

---

And after the call of `changeTitle(jungleDVD, cinderellaDVD.getTitle())`, why is the title of the JungleDVD changed?

The `changeTitle` method operates on the `jungleDVD` object directly because the reference to `jungleDVD` is passed (by value) to the method. Here's what happens:
- Inside `changeTitle`, the `setTitle` method is called on the `jungleDVD` object, which modifies its title. This is because the method has access to the actual object via the copied reference.
- Reassigning the local variable `dvd` to a new object (`new DigitalVideoDisc(oldTitle)`) does not affect the original reference `jungleDVD` in `main`. However, the modification made to the title (`dvd.setTitle(title)`) persists because it changes the state of the original object.

---

In summary:
- The `jungleDVD` object's title is modified because `setTitle` directly updates its internal state.
- The reassignment of the local variable `dvd` to a new object only changes the local reference and does not affect the original reference in the caller.